C++ Date:

  Date(offset)                          // private
  from_offset(Offset)                   // public but internal

  Date()                                // default; invalid
  Date(Date const&)                     // copy
  Date(Date<> const&)                   // copy conversion

  from_datenum(Datenum)
  from_ordinal_date(Year, Ordinal)
  from_parts(Year, Month, Day)
  from_parts(DateParts const&)
  from_week_date(Year, Week, Weekday)
  from_ymdi(int)


Python Date:

  Date()                                # default; invalid
  Date(date)                            # any date-like object

  from_datenum(datenum)
  from_ordinal_date(year, ordinal)
  from_parts(year, month, day)
  from_parts((year, month, day))
  from_week_date(year, week, weekday)
  from_ymdi(ymdi)

  convert(obj)                          # sloppy conversion



--------------------------------------------------------------------------------

C++ Time

  Time()                                // default; invalid
  Time(Time const&)
  Time(Time<> const&)

  Time(date, time, tz, first)
  Time(datenum, dayticks, tz, first)

  Time(y, m, d, h, m, s, tz, first)     // convenience (?)
  
Python Time

  Time()                                # default; invalid
  Time(time)                            # any UTC time-like object

  from_parts((y, m, d, h, m, s), tz, first)
  from_parts(date_parts, time_parts, tz, first)
  from_date_daytime(date, daytime, tz, first)
  from_date_daytime(daynum, dayticks, tz, first)

  get_parts(tz)

  get_date_time(tz) -> (Date, Daytime)
  time @ tz -> (Date, Daytime)          # synonym for get_date_time(), Py>=3.5



--------------------------------------------------------------------------------

C++ conversion

  Time()
  Time(offset)

  from_utc_datenum_daytick(datenum, daytick)
  
  from_local<Date, Daytime>(LocalTime<Date, Daytime>, TimeZone)
  from_local(Datenum, Daytick, TimeZone)
  from_local<Date, Daytime>(Date, Daytime, TimeZone)

  to_local_datenum_dayticks<Time>(Time, TimeZone) :: LocalDatenumDaytick
  to_local<Time, Date, Daytime>(Time, TimeZone) :: LocalTime<Date, Daytime>

Python conversion

  Time()
  Time(offset)

  from_local(LocalTime, TimeZone) -> Time
  from_local((Datenum, Daytick), TimeZone) -> Time
  from_local(Date, Daytime, TimeZone) -> Time
  LocalTime @ tz -> Time                # synonym for from_local()
  (date, daytime) @ tz -> Time          # synonym for from_local()

  to_local(Time, TimeZone) -> LocalTime
  time @ tz -> LocalTime                # synonym for to_local()

--------------------------------------------------------------------------------

Formatting

  format(t, "pattern")                  # display time zone
  format(d, "pattern")
  format(y, "pattern")
  format(local, "pattern")

!! Should LocalTime carry a time zone?

